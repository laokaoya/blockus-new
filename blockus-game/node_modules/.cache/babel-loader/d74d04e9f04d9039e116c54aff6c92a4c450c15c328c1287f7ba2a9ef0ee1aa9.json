{"ast":null,"code":"import _objectSpread from\"D:/blockus new/blockus-game/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// 游戏状态管理Hook\nimport{useState,useCallback,useEffect}from'react';import{PIECE_SHAPES}from'../constants/pieces';import{canPlacePiece,placePiece,calculateScore,isGameFinished}from'../utils/gameEngine';import{AIPlayer}from'../utils/aiPlayer';const BOARD_SIZE=20;const TURN_TIME_LIMIT=30;export function useGameState(){// 初始化游戏状态\nconst[gameState,setGameState]=useState(()=>initializeGameState());const[aiPlayers,setAiPlayers]=useState([]);const[thinkingAI,setThinkingAI]=useState(null);// 初始化AI玩家\nuseEffect(()=>{const ais=[new AIPlayer('yellow'),new AIPlayer('blue'),new AIPlayer('green')];setAiPlayers(ais);},[]);// 初始化游戏状态\nfunction initializeGameState(){const players=[createPlayer('red','玩家'),createPlayer('yellow','AI-小黄'),createPlayer('blue','AI-小蓝'),createPlayer('green','AI-小绿')];// 设置第一个玩家为当前回合\nplayers[0].isCurrentTurn=true;return{board:Array(BOARD_SIZE).fill(null).map(()=>Array(BOARD_SIZE).fill(0)),players,currentPlayerIndex:0,gamePhase:'playing',turnTimeLimit:TURN_TIME_LIMIT,timeLeft:TURN_TIME_LIMIT,selectedPiece:null,selectedPiecePosition:null};}// 创建玩家\nfunction createPlayer(color,name){const pieces=[];let pieceId=0;// 为每种类型的拼图创建所有形状的实例\nObject.entries(PIECE_SHAPES).forEach(_ref=>{let[type,shapes]=_ref;const pieceType=parseInt(type);// 为每个形状创建一个拼图块\nshapes.forEach((shape,shapeIndex)=>{pieces.push({id:\"\".concat(color,\"-\").concat(pieceType,\"-\").concat(shapeIndex,\"-\").concat(pieceId++),type:pieceType,shape:shape,color,isUsed:false});});});return{id:color,name,color,pieces,score:0,isSettled:false,isCurrentTurn:false};}// 选择拼图\nconst selectPiece=useCallback(piece=>{setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{selectedPiece:piece}));},[]);// 放置拼图\nconst placePieceOnBoard=useCallback(position=>{if(!gameState.selectedPiece)return false;const currentPlayer=gameState.players[gameState.currentPlayerIndex];const colorIndex=gameState.currentPlayerIndex+1;if(!canPlacePiece(gameState.board,gameState.selectedPiece,position,colorIndex)){return false;}// 放置拼图\nconst newBoard=placePiece(gameState.board,gameState.selectedPiece,position,colorIndex);// 标记拼图为已使用\nconst newPlayers=gameState.players.map(player=>{if(player.id===currentPlayer.id){const newPieces=player.pieces.map(p=>p.id===gameState.selectedPiece.id?_objectSpread(_objectSpread({},p),{},{isUsed:true}):p);return _objectSpread(_objectSpread({},player),{},{pieces:newPieces});}return player;});// 计算新得分\nconst newScore=calculateScore(newBoard,colorIndex);const updatedPlayers=newPlayers.map(player=>player.id===currentPlayer.id?_objectSpread(_objectSpread({},player),{},{score:newScore}):player);// 进入下一回合\nconst nextPlayerIndex=(gameState.currentPlayerIndex+1)%gameState.players.length;const nextPlayers=updatedPlayers.map((player,index)=>_objectSpread(_objectSpread({},player),{},{isCurrentTurn:index===nextPlayerIndex}));setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{board:newBoard,players:nextPlayers,currentPlayerIndex:nextPlayerIndex,selectedPiece:null,selectedPiecePosition:null,timeLeft:nextPlayers[nextPlayerIndex].color==='red'?TURN_TIME_LIMIT:prev.timeLeft}));return true;},[gameState]);// AI回合\nconst processAITurn=useCallback(()=>{const currentPlayer=gameState.players[gameState.currentPlayerIndex];// 跳过玩家回合\nif(currentPlayer.color==='red')return;// 设置AI思考状态\nsetThinkingAI(currentPlayer.id);// AI思考3秒后再执行移动\nsetTimeout(()=>{const aiPlayer=aiPlayers.find(ai=>ai.getColor()===currentPlayer.color);if(!aiPlayer)return;const move=aiPlayer.makeMove(gameState.board,currentPlayer.pieces);if(move){// AI放置拼图\nconst colorIndex=gameState.currentPlayerIndex+1;const newBoard=placePiece(gameState.board,move.piece,move.position,colorIndex);// 更新玩家状态\nconst newPlayers=gameState.players.map(player=>{if(player.id===currentPlayer.id){const newPieces=player.pieces.map(p=>p.id===move.piece.id?_objectSpread(_objectSpread({},p),{},{isUsed:true}):p);const newScore=calculateScore(newBoard,colorIndex);return _objectSpread(_objectSpread({},player),{},{pieces:newPieces,score:newScore});}return player;});// 进入下一回合\nconst nextPlayerIndex=(gameState.currentPlayerIndex+1)%gameState.players.length;const nextPlayers=newPlayers.map((player,index)=>_objectSpread(_objectSpread({},player),{},{isCurrentTurn:index===nextPlayerIndex}));setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{board:newBoard,players:nextPlayers,currentPlayerIndex:nextPlayerIndex,timeLeft:nextPlayers[nextPlayerIndex].color==='red'?TURN_TIME_LIMIT:prev.timeLeft}));// 清除AI思考状态\nsetThinkingAI(null);}else{// AI无法放置拼图，进入结算\nconst newPlayers=gameState.players.map(player=>player.id===currentPlayer.id?_objectSpread(_objectSpread({},player),{},{isSettled:true}):player);// 进入下一回合\nconst nextPlayerIndex=(gameState.currentPlayerIndex+1)%gameState.players.length;const nextPlayers=newPlayers.map((player,index)=>_objectSpread(_objectSpread({},player),{},{isCurrentTurn:index===nextPlayerIndex}));setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{players:nextPlayers,currentPlayerIndex:nextPlayerIndex,timeLeft:nextPlayers[nextPlayerIndex].color==='red'?TURN_TIME_LIMIT:prev.timeLeft}));// 清除AI思考状态\nsetThinkingAI(null);}},3000);// AI思考3秒\n},[gameState,aiPlayers]);// 结算玩家\nconst settlePlayer=useCallback(()=>{const currentPlayer=gameState.players[gameState.currentPlayerIndex];if(currentPlayer.color!=='red')return;const newPlayers=gameState.players.map(player=>player.id===currentPlayer.id?_objectSpread(_objectSpread({},player),{},{isSettled:true}):player);// 进入下一回合\nconst nextPlayerIndex=(gameState.currentPlayerIndex+1)%gameState.players.length;const nextPlayers=newPlayers.map((player,index)=>_objectSpread(_objectSpread({},player),{},{isCurrentTurn:index===nextPlayerIndex}));setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{players:nextPlayers,currentPlayerIndex:nextPlayerIndex,timeLeft:nextPlayers[nextPlayerIndex].color==='red'?TURN_TIME_LIMIT:prev.timeLeft}));},[gameState]);// 重置游戏\nconst resetGame=useCallback(()=>{setGameState(initializeGameState());},[]);// 倒计时 - 只有人类玩家有时间限制\nuseEffect(()=>{if(gameState.gamePhase!=='playing')return;const currentPlayer=gameState.players[gameState.currentPlayerIndex];// 只有人类玩家（红色）有时间限制\nif(currentPlayer.color!=='red')return;const timer=setInterval(()=>{setGameState(prev=>{if(prev.timeLeft<=1){// 人类玩家超时，自动结算\nreturn _objectSpread(_objectSpread({},prev),{},{players:prev.players.map(player=>player.id===currentPlayer.id?_objectSpread(_objectSpread({},player),{},{isSettled:true}):player),currentPlayerIndex:(prev.currentPlayerIndex+1)%prev.players.length,timeLeft:TURN_TIME_LIMIT});}return _objectSpread(_objectSpread({},prev),{},{timeLeft:prev.timeLeft-1});});},1000);return()=>clearInterval(timer);},[gameState.gamePhase,gameState.currentPlayerIndex]);// 检查游戏是否结束\nuseEffect(()=>{if(isGameFinished(gameState.players)){setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{gamePhase:'finished'}));}},[gameState.players]);// 自动处理AI回合\nuseEffect(()=>{if(gameState.gamePhase==='playing'&&gameState.players[gameState.currentPlayerIndex].color!=='red'){processAITurn();}},[gameState.currentPlayerIndex,gameState.gamePhase,processAITurn]);return{gameState,selectPiece,placePieceOnBoard,settlePlayer,resetGame,thinkingAI};}","map":{"version":3,"names":["useState","useCallback","useEffect","PIECE_SHAPES","canPlacePiece","placePiece","calculateScore","isGameFinished","AIPlayer","BOARD_SIZE","TURN_TIME_LIMIT","useGameState","gameState","setGameState","initializeGameState","aiPlayers","setAiPlayers","thinkingAI","setThinkingAI","ais","players","createPlayer","isCurrentTurn","board","Array","fill","map","currentPlayerIndex","gamePhase","turnTimeLimit","timeLeft","selectedPiece","selectedPiecePosition","color","name","pieces","pieceId","Object","entries","forEach","_ref","type","shapes","pieceType","parseInt","shape","shapeIndex","push","id","concat","isUsed","score","isSettled","selectPiece","piece","prev","_objectSpread","placePieceOnBoard","position","currentPlayer","colorIndex","newBoard","newPlayers","player","newPieces","p","newScore","updatedPlayers","nextPlayerIndex","length","nextPlayers","index","processAITurn","setTimeout","aiPlayer","find","ai","getColor","move","makeMove","settlePlayer","resetGame","timer","setInterval","clearInterval"],"sources":["D:/blockus new/blockus-game/src/hooks/useGameState.ts"],"sourcesContent":["// 游戏状态管理Hook\r\n\r\nimport { useState, useCallback, useEffect } from 'react';\r\nimport { GameState, Player, Piece, Position, PlayerColor } from '../types/game';\r\nimport { PIECE_SHAPES, PIECE_COUNTS, PLAYER_COLORS, PLAYER_NAMES } from '../constants/pieces';\r\nimport { canPlacePiece, placePiece, calculateScore, isGameFinished, getWinner } from '../utils/gameEngine';\r\nimport { AIPlayer } from '../utils/aiPlayer';\r\n\r\nconst BOARD_SIZE = 20;\r\nconst TURN_TIME_LIMIT = 30;\r\n\r\nexport function useGameState() {\r\n  // 初始化游戏状态\r\n  const [gameState, setGameState] = useState<GameState>(() => initializeGameState());\r\n  const [aiPlayers, setAiPlayers] = useState<AIPlayer[]>([]);\r\n  const [thinkingAI, setThinkingAI] = useState<string | null>(null);\r\n  \r\n  // 初始化AI玩家\r\n  useEffect(() => {\r\n    const ais = [\r\n      new AIPlayer('yellow'),\r\n      new AIPlayer('blue'),\r\n      new AIPlayer('green')\r\n    ];\r\n    setAiPlayers(ais);\r\n  }, []);\r\n  \r\n  // 初始化游戏状态\r\n  function initializeGameState(): GameState {\r\n    const players: Player[] = [\r\n      createPlayer('red', '玩家'),\r\n      createPlayer('yellow', 'AI-小黄'),\r\n      createPlayer('blue', 'AI-小蓝'),\r\n      createPlayer('green', 'AI-小绿')\r\n    ];\r\n    \r\n    // 设置第一个玩家为当前回合\r\n    players[0].isCurrentTurn = true;\r\n    \r\n    return {\r\n      board: Array(BOARD_SIZE).fill(null).map(() => Array(BOARD_SIZE).fill(0)),\r\n      players,\r\n      currentPlayerIndex: 0,\r\n      gamePhase: 'playing',\r\n      turnTimeLimit: TURN_TIME_LIMIT,\r\n      timeLeft: TURN_TIME_LIMIT,\r\n      selectedPiece: null,\r\n      selectedPiecePosition: null\r\n    };\r\n  }\r\n  \r\n  // 创建玩家\r\n  function createPlayer(color: PlayerColor, name: string): Player {\r\n    const pieces: Piece[] = [];\r\n    let pieceId = 0;\r\n    \r\n    // 为每种类型的拼图创建所有形状的实例\r\n    Object.entries(PIECE_SHAPES).forEach(([type, shapes]) => {\r\n      const pieceType = parseInt(type) as 1 | 2 | 3 | 4 | 5;\r\n      \r\n      // 为每个形状创建一个拼图块\r\n      shapes.forEach((shape, shapeIndex) => {\r\n        pieces.push({\r\n          id: `${color}-${pieceType}-${shapeIndex}-${pieceId++}`,\r\n          type: pieceType,\r\n          shape: shape,\r\n          color,\r\n          isUsed: false\r\n        });\r\n      });\r\n    });\r\n    \r\n    return {\r\n      id: color,\r\n      name,\r\n      color,\r\n      pieces,\r\n      score: 0,\r\n      isSettled: false,\r\n      isCurrentTurn: false\r\n    };\r\n  }\r\n  \r\n  // 选择拼图\r\n  const selectPiece = useCallback((piece: Piece) => {\r\n    setGameState(prev => ({\r\n      ...prev,\r\n      selectedPiece: piece\r\n    }));\r\n  }, []);\r\n  \r\n  // 放置拼图\r\n  const placePieceOnBoard = useCallback((position: Position) => {\r\n    if (!gameState.selectedPiece) return false;\r\n    \r\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\r\n    const colorIndex = gameState.currentPlayerIndex + 1;\r\n    \r\n    if (!canPlacePiece(gameState.board, gameState.selectedPiece, position, colorIndex)) {\r\n      return false;\r\n    }\r\n    \r\n    // 放置拼图\r\n    const newBoard = placePiece(gameState.board, gameState.selectedPiece, position, colorIndex);\r\n    \r\n    // 标记拼图为已使用\r\n    const newPlayers = gameState.players.map(player => {\r\n      if (player.id === currentPlayer.id) {\r\n        const newPieces = player.pieces.map(p => \r\n          p.id === gameState.selectedPiece!.id ? { ...p, isUsed: true } : p\r\n        );\r\n        return { ...player, pieces: newPieces };\r\n      }\r\n      return player;\r\n    });\r\n    \r\n    // 计算新得分\r\n    const newScore = calculateScore(newBoard, colorIndex);\r\n    const updatedPlayers = newPlayers.map(player => \r\n      player.id === currentPlayer.id ? { ...player, score: newScore } : player\r\n    );\r\n    \r\n    // 进入下一回合\r\n    const nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\r\n    const nextPlayers = updatedPlayers.map((player, index) => ({\r\n      ...player,\r\n      isCurrentTurn: index === nextPlayerIndex\r\n    }));\r\n    \r\n         setGameState(prev => ({\r\n       ...prev,\r\n       board: newBoard,\r\n       players: nextPlayers,\r\n       currentPlayerIndex: nextPlayerIndex,\r\n       selectedPiece: null,\r\n       selectedPiecePosition: null,\r\n       timeLeft: nextPlayers[nextPlayerIndex].color === 'red' ? TURN_TIME_LIMIT : prev.timeLeft\r\n     }));\r\n    \r\n    return true;\r\n  }, [gameState]);\r\n  \r\n    // AI回合\r\n  const processAITurn = useCallback(() => {\r\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\r\n    \r\n    // 跳过玩家回合\r\n    if (currentPlayer.color === 'red') return;\r\n    \r\n    // 设置AI思考状态\r\n    setThinkingAI(currentPlayer.id);\r\n    \r\n    // AI思考3秒后再执行移动\r\n    setTimeout(() => {\r\n      const aiPlayer = aiPlayers.find(ai => ai.getColor() === currentPlayer.color);\r\n      if (!aiPlayer) return;\r\n      \r\n      const move = aiPlayer.makeMove(gameState.board, currentPlayer.pieces);\r\n      \r\n      if (move) {\r\n        // AI放置拼图\r\n        const colorIndex = gameState.currentPlayerIndex + 1;\r\n        const newBoard = placePiece(gameState.board, move.piece, move.position, colorIndex);\r\n        \r\n        // 更新玩家状态\r\n        const newPlayers = gameState.players.map(player => {\r\n          if (player.id === currentPlayer.id) {\r\n            const newPieces = player.pieces.map(p => \r\n              p.id === move.piece.id ? { ...p, isUsed: true } : p\r\n            );\r\n            const newScore = calculateScore(newBoard, colorIndex);\r\n            return { ...player, pieces: newPieces, score: newScore };\r\n          }\r\n          return player;\r\n        });\r\n        \r\n        // 进入下一回合\r\n        const nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\r\n        const nextPlayers = newPlayers.map((player, index) => ({\r\n          ...player,\r\n          isCurrentTurn: index === nextPlayerIndex\r\n        }));\r\n        \r\n        setGameState(prev => ({\r\n          ...prev,\r\n          board: newBoard,\r\n          players: nextPlayers,\r\n          currentPlayerIndex: nextPlayerIndex,\r\n          timeLeft: nextPlayers[nextPlayerIndex].color === 'red' ? TURN_TIME_LIMIT : prev.timeLeft\r\n        }));\r\n        \r\n        // 清除AI思考状态\r\n        setThinkingAI(null);\r\n      } else {\r\n        // AI无法放置拼图，进入结算\r\n        const newPlayers = gameState.players.map(player => \r\n          player.id === currentPlayer.id ? { ...player, isSettled: true } : player\r\n        );\r\n        \r\n        // 进入下一回合\r\n        const nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\r\n        const nextPlayers = newPlayers.map((player, index) => ({\r\n          ...player,\r\n          isCurrentTurn: index === nextPlayerIndex\r\n        }));\r\n        \r\n        setGameState(prev => ({\r\n          ...prev,\r\n          players: nextPlayers,\r\n          currentPlayerIndex: nextPlayerIndex,\r\n          timeLeft: nextPlayers[nextPlayerIndex].color === 'red' ? TURN_TIME_LIMIT : prev.timeLeft\r\n        }));\r\n        \r\n        // 清除AI思考状态\r\n        setThinkingAI(null);\r\n      }\r\n    }, 3000); // AI思考3秒\r\n  }, [gameState, aiPlayers]);\r\n  \r\n  // 结算玩家\r\n  const settlePlayer = useCallback(() => {\r\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\r\n    \r\n    if (currentPlayer.color !== 'red') return;\r\n    \r\n    const newPlayers = gameState.players.map(player => \r\n      player.id === currentPlayer.id ? { ...player, isSettled: true } : player\r\n    );\r\n    \r\n    // 进入下一回合\r\n    const nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\r\n    const nextPlayers = newPlayers.map((player, index) => ({\r\n      ...player,\r\n      isCurrentTurn: index === nextPlayerIndex\r\n    }));\r\n    \r\n    setGameState(prev => ({\r\n      ...prev,\r\n      players: nextPlayers,\r\n      currentPlayerIndex: nextPlayerIndex,\r\n      timeLeft: nextPlayers[nextPlayerIndex].color === 'red' ? TURN_TIME_LIMIT : prev.timeLeft\r\n    }));\r\n  }, [gameState]);\r\n  \r\n  // 重置游戏\r\n  const resetGame = useCallback(() => {\r\n    setGameState(initializeGameState());\r\n  }, []);\r\n  \r\n  // 倒计时 - 只有人类玩家有时间限制\r\n  useEffect(() => {\r\n    if (gameState.gamePhase !== 'playing') return;\r\n    \r\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\r\n    \r\n    // 只有人类玩家（红色）有时间限制\r\n    if (currentPlayer.color !== 'red') return;\r\n    \r\n    const timer = setInterval(() => {\r\n      setGameState(prev => {\r\n        if (prev.timeLeft <= 1) {\r\n          // 人类玩家超时，自动结算\r\n          return {\r\n            ...prev,\r\n            players: prev.players.map(player => \r\n              player.id === currentPlayer.id ? { ...player, isSettled: true } : player\r\n            ),\r\n            currentPlayerIndex: (prev.currentPlayerIndex + 1) % prev.players.length,\r\n            timeLeft: TURN_TIME_LIMIT\r\n          };\r\n        }\r\n        \r\n        return {\r\n          ...prev,\r\n          timeLeft: prev.timeLeft - 1\r\n        };\r\n      });\r\n    }, 1000);\r\n    \r\n    return () => clearInterval(timer);\r\n  }, [gameState.gamePhase, gameState.currentPlayerIndex]);\r\n  \r\n  // 检查游戏是否结束\r\n  useEffect(() => {\r\n    if (isGameFinished(gameState.players)) {\r\n      setGameState(prev => ({\r\n        ...prev,\r\n        gamePhase: 'finished'\r\n      }));\r\n    }\r\n  }, [gameState.players]);\r\n  \r\n  // 自动处理AI回合\r\n  useEffect(() => {\r\n    if (gameState.gamePhase === 'playing' && \r\n        gameState.players[gameState.currentPlayerIndex].color !== 'red') {\r\n      processAITurn();\r\n    }\r\n  }, [gameState.currentPlayerIndex, gameState.gamePhase, processAITurn]);\r\n  \r\n  return {\r\n    gameState,\r\n    selectPiece,\r\n    placePieceOnBoard,\r\n    settlePlayer,\r\n    resetGame,\r\n    thinkingAI\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}