{"ast":null,"code":"var _jsxFileName = \"D:\\\\blockus new\\\\blockus-game\\\\src\\\\components\\\\GameBoard.tsx\",\n  _s = $RefreshSig$();\n// 游戏棋盘组件\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { canPlacePiece } from '../utils/gameEngine';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: #f5f5f5;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  position: relative;\n`;\n_c = BoardContainer;\nconst BoardTitle = styled.h2`\n  margin: 0 0 20px 0;\n  color: #333;\n  font-size: 24px;\n`;\n_c2 = BoardTitle;\nconst BoardGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(20, 1fr);\n  grid-template-rows: repeat(20, 1fr);\n  gap: 1px;\n  background: #ccc;\n  border: 2px solid #333;\n  width: 600px;\n  height: 600px;\n  max-width: 90vw;\n  max-height: 90vw;\n`;\n_c3 = BoardGrid;\nconst Cell = styled.div`\n  width: 100%;\n  height: 100%;\n  background: ${props => {\n  if (props.isOccupied) {\n    const colors = ['transparent', '#FF4444', '#FFDD44', '#4444FF', '#44FF44'];\n    return colors[props.playerColor] || '#ccc';\n  }\n  if (props.isHighlighted) {\n    return 'rgba(255, 255, 0, 0.3)';\n  }\n  if (props.isInvalid) {\n    return 'rgba(255, 0, 0, 0.2)';\n  }\n  if (props.isCurrentTurn) {\n    return 'rgba(0, 255, 0, 0.1)';\n  }\n  return '#fff';\n}};\n  border: ${props => {\n  if (props.isHighlighted) return '2px solid #FFD700';\n  if (props.isInvalid) return '2px solid #FF4444';\n  return '1px solid #ddd';\n}};\n  cursor: ${props => props.isHighlighted ? 'pointer' : 'default'};\n  transition: all 0.2s ease;\n  \n  &:hover {\n    transform: ${props => props.isHighlighted ? 'scale(1.1)' : 'scale(1)'};\n    box-shadow: ${props => props.isHighlighted ? '0 0 8px rgba(255, 215, 0, 0.6)' : 'none'};\n  }\n`;\n_c4 = Cell;\nconst GameBoard = ({\n  gameState,\n  onCellClick,\n  onCellHover,\n  onPiecePlace\n}) => {\n  _s();\n  const {\n    board,\n    players,\n    currentPlayerIndex,\n    selectedPiece\n  } = gameState;\n  const currentPlayer = players[currentPlayerIndex];\n\n  // 拖拽状态\n  const [isDragging, setIsDragging] = useState(false);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dragMode, setDragMode] = useState('none');\n\n  // 全局鼠标事件监听\n  useEffect(() => {\n    const handleGlobalMouseMove = e => {\n      if (dragMode === 'dragging' && selectedPiece) {\n        // 计算棋盘上的位置\n        const boardElement = document.querySelector('[data-board-grid]');\n        if (boardElement) {\n          const rect = boardElement.getBoundingClientRect();\n          const x = Math.floor((e.clientX - rect.left) / (rect.width / 20));\n          const y = Math.floor((e.clientY - rect.top) / (rect.height / 20));\n          if (x >= 0 && x < 20 && y >= 0 && y < 20) {\n            setMousePosition({\n              x,\n              y\n            });\n          }\n        }\n      }\n    };\n    const handleStartDragFromLibrary = e => {\n      const {\n        piece,\n        clientX,\n        clientY\n      } = e.detail;\n      setIsDragging(true);\n      setDragMode('dragging');\n\n      // 计算棋盘上的初始位置\n      const boardElement = document.querySelector('[data-board-grid]');\n      if (boardElement) {\n        const rect = boardElement.getBoundingClientRect();\n        const x = Math.floor((clientX - rect.left) / (rect.width / 20));\n        const y = Math.floor((clientY - rect.top) / (rect.height / 20));\n        setMousePosition({\n          x,\n          y\n        });\n      }\n    };\n    if (dragMode === 'dragging') {\n      document.addEventListener('mousemove', handleGlobalMouseMove);\n    }\n\n    // 监听从拼图库开始的拖拽\n    const boardElement = document.querySelector('[data-board-grid]');\n    if (boardElement) {\n      boardElement.addEventListener('startDragFromLibrary', handleStartDragFromLibrary);\n    }\n    return () => {\n      document.removeEventListener('mousemove', handleGlobalMouseMove);\n      if (boardElement) {\n        boardElement.removeEventListener('startDragFromLibrary', handleStartDragFromLibrary);\n      }\n    };\n  }, [dragMode, selectedPiece]);\n\n  // 检查拼图是否可以放置在指定位置\n  const canPlaceAt = (x, y) => {\n    if (!selectedPiece || currentPlayer.color !== 'red') return false;\n    const colorIndex = currentPlayerIndex + 1;\n    return canPlacePiece(board, selectedPiece, {\n      x,\n      y\n    }, colorIndex);\n  };\n\n  // 开始拖拽\n  const startDrag = (x, y, e) => {\n    if (!selectedPiece || currentPlayer.color !== 'red') return;\n    setIsDragging(true);\n    setDragMode('dragging');\n    setMousePosition({\n      x,\n      y\n    });\n  };\n\n  // 从拼图库开始拖拽\n  const startDragFromLibrary = e => {\n    if (!selectedPiece || currentPlayer.color !== 'red') return;\n    setIsDragging(true);\n    setDragMode('dragging');\n\n    // 计算棋盘上的初始位置\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = Math.floor((e.clientX - rect.left) / (rect.width / 20));\n    const y = Math.floor((e.clientY - rect.top) / (rect.height / 20));\n    setMousePosition({\n      x,\n      y\n    });\n  };\n\n  // 拖拽中\n  const handleDrag = e => {\n    if (dragMode !== 'dragging') return;\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = Math.floor((e.clientX - rect.left) / (rect.width / 20));\n    const y = Math.floor((e.clientY - rect.top) / (rect.height / 20));\n    setMousePosition({\n      x,\n      y\n    });\n  };\n\n  // 结束拖拽\n  const endDrag = () => {\n    if (dragMode !== 'dragging') return;\n    setIsDragging(false);\n    setDragMode('none');\n\n    // 检查是否可以放置\n    if (canPlaceAt(mousePosition.x, mousePosition.y)) {\n      onPiecePlace(mousePosition);\n    }\n  };\n\n  // 处理棋盘点击（放置拼图）\n  const handleBoardClick = (x, y) => {\n    if (dragMode === 'dragging' && selectedPiece) {\n      // 如果正在拖拽，点击就放置\n      if (canPlaceAt(x, y)) {\n        onPiecePlace({\n          x,\n          y\n        });\n        setIsDragging(false);\n        setDragMode('none');\n      }\n    } else if (!isDragging) {\n      // 如果没有拖拽，正常处理点击\n      onCellClick({\n        x,\n        y\n      });\n    }\n  };\n  const handleCellClick = (x, y) => {\n    if (isDragging) return;\n    onCellClick({\n      x,\n      y\n    });\n  };\n  const handleCellHover = (x, y) => {\n    if (isDragging) return;\n    onCellHover({\n      x,\n      y\n    });\n  };\n\n  // 检查位置是否在拼图范围内\n  const isPositionInPiece = (x, y, pieceX, pieceY) => {\n    var _shape$;\n    if (!selectedPiece) return false;\n    const {\n      shape\n    } = selectedPiece;\n    const relativeX = x - pieceX;\n    const relativeY = y - pieceY;\n    return relativeY >= 0 && relativeY < shape.length && relativeX >= 0 && relativeX < ((_shape$ = shape[0]) === null || _shape$ === void 0 ? void 0 : _shape$.length) && shape[relativeY][relativeX] === 1;\n  };\n\n  // 检查位置是否应该高亮（可放置）\n  const shouldHighlight = (x, y) => {\n    if (dragMode !== 'dragging' || !selectedPiece) return false;\n    return isPositionInPiece(x, y, mousePosition.x, mousePosition.y) && canPlaceAt(mousePosition.x, mousePosition.y);\n  };\n\n  // 检查位置是否应该显示无效提示（不可放置）\n  const shouldShowInvalid = (x, y) => {\n    if (dragMode !== 'dragging' || !selectedPiece) return false;\n    return isPositionInPiece(x, y, mousePosition.x, mousePosition.y) && !canPlaceAt(mousePosition.x, mousePosition.y);\n  };\n  return /*#__PURE__*/_jsxDEV(BoardContainer, {\n    children: [/*#__PURE__*/_jsxDEV(BoardTitle, {\n      children: [currentPlayer.name, \"\\u7684\\u56DE\\u5408\", currentPlayer.color === 'red' && ` - 剩余时间: ${gameState.timeLeft}秒`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BoardGrid, {\n      \"data-board-grid\": true,\n      onMouseMove: handleDrag,\n      children: board.map((row, y) => row.map((cell, x) => /*#__PURE__*/_jsxDEV(Cell, {\n        isOccupied: cell !== 0,\n        playerColor: cell,\n        isHighlighted: shouldHighlight(x, y),\n        isInvalid: shouldShowInvalid(x, y),\n        isCurrentTurn: currentPlayer.isCurrentTurn,\n        onClick: () => handleBoardClick(x, y),\n        onMouseEnter: () => handleCellHover(x, y),\n        onMouseDown: e => startDrag(x, y, e)\n      }, `${x}-${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 26\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"8DXk5Izxln1ttqjySDq01zvNA2k=\");\n_c5 = GameBoard;\nexport default GameBoard;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"BoardContainer\");\n$RefreshReg$(_c2, \"BoardTitle\");\n$RefreshReg$(_c3, \"BoardGrid\");\n$RefreshReg$(_c4, \"Cell\");\n$RefreshReg$(_c5, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","styled","canPlacePiece","jsxDEV","_jsxDEV","BoardContainer","div","_c","BoardTitle","h2","_c2","BoardGrid","_c3","Cell","props","isOccupied","colors","playerColor","isHighlighted","isInvalid","isCurrentTurn","_c4","GameBoard","gameState","onCellClick","onCellHover","onPiecePlace","_s","board","players","currentPlayerIndex","selectedPiece","currentPlayer","isDragging","setIsDragging","mousePosition","setMousePosition","x","y","dragMode","setDragMode","handleGlobalMouseMove","e","boardElement","document","querySelector","rect","getBoundingClientRect","Math","floor","clientX","left","width","clientY","top","height","handleStartDragFromLibrary","piece","detail","addEventListener","removeEventListener","canPlaceAt","color","colorIndex","startDrag","startDragFromLibrary","currentTarget","handleDrag","endDrag","handleBoardClick","handleCellClick","handleCellHover","isPositionInPiece","pieceX","pieceY","_shape$","shape","relativeX","relativeY","length","shouldHighlight","shouldShowInvalid","children","name","timeLeft","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","map","row","cell","onClick","onMouseEnter","onMouseDown","_c5","$RefreshReg$"],"sources":["D:/blockus new/blockus-game/src/components/GameBoard.tsx"],"sourcesContent":["// 游戏棋盘组件\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { GameState, Position, Piece } from '../types/game';\r\nimport { canPlacePiece } from '../utils/gameEngine';\r\n\r\ninterface GameBoardProps {\r\n  gameState: GameState;\r\n  onCellClick: (position: Position) => void;\r\n  onCellHover: (position: Position) => void;\r\n  onPiecePlace: (position: Position) => void;\r\n}\r\n\r\nconst BoardContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: #f5f5f5;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  position: relative;\r\n`;\r\n\r\nconst BoardTitle = styled.h2`\r\n  margin: 0 0 20px 0;\r\n  color: #333;\r\n  font-size: 24px;\r\n`;\r\n\r\nconst BoardGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(20, 1fr);\r\n  grid-template-rows: repeat(20, 1fr);\r\n  gap: 1px;\r\n  background: #ccc;\r\n  border: 2px solid #333;\r\n  width: 600px;\r\n  height: 600px;\r\n  max-width: 90vw;\r\n  max-height: 90vw;\r\n`;\r\n\r\nconst Cell = styled.div<{ \r\n  isOccupied: boolean; \r\n  playerColor: number;\r\n  isHighlighted: boolean;\r\n  isInvalid: boolean;\r\n  isCurrentTurn: boolean;\r\n}>`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: ${props => {\r\n    if (props.isOccupied) {\r\n      const colors = ['transparent', '#FF4444', '#FFDD44', '#4444FF', '#44FF44'];\r\n      return colors[props.playerColor] || '#ccc';\r\n    }\r\n    if (props.isHighlighted) {\r\n      return 'rgba(255, 255, 0, 0.3)';\r\n    }\r\n    if (props.isInvalid) {\r\n      return 'rgba(255, 0, 0, 0.2)';\r\n    }\r\n    if (props.isCurrentTurn) {\r\n      return 'rgba(0, 255, 0, 0.1)';\r\n    }\r\n    return '#fff';\r\n  }};\r\n  border: ${props => {\r\n    if (props.isHighlighted) return '2px solid #FFD700';\r\n    if (props.isInvalid) return '2px solid #FF4444';\r\n    return '1px solid #ddd';\r\n  }};\r\n  cursor: ${props => props.isHighlighted ? 'pointer' : 'default'};\r\n  transition: all 0.2s ease;\r\n  \r\n  &:hover {\r\n    transform: ${props => props.isHighlighted ? 'scale(1.1)' : 'scale(1)'};\r\n    box-shadow: ${props => props.isHighlighted ? '0 0 8px rgba(255, 215, 0, 0.6)' : 'none'};\r\n  }\r\n`;\r\n\r\n\r\n\r\nconst GameBoard: React.FC<GameBoardProps> = ({ \r\n  gameState, \r\n  onCellClick, \r\n  onCellHover,\r\n  onPiecePlace\r\n}) => {\r\n  const { board, players, currentPlayerIndex, selectedPiece } = gameState;\r\n  const currentPlayer = players[currentPlayerIndex];\r\n  \r\n  // 拖拽状态\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [mousePosition, setMousePosition] = useState<Position>({ x: 0, y: 0 });\r\n  const [dragMode, setDragMode] = useState<'none' | 'dragging' | 'placing'>('none');\r\n  \r\n  // 全局鼠标事件监听\r\n  useEffect(() => {\r\n    const handleGlobalMouseMove = (e: MouseEvent) => {\r\n      if (dragMode === 'dragging' && selectedPiece) {\r\n        // 计算棋盘上的位置\r\n        const boardElement = document.querySelector('[data-board-grid]');\r\n        if (boardElement) {\r\n          const rect = boardElement.getBoundingClientRect();\r\n          const x = Math.floor((e.clientX - rect.left) / (rect.width / 20));\r\n          const y = Math.floor((e.clientY - rect.top) / (rect.height / 20));\r\n          \r\n          if (x >= 0 && x < 20 && y >= 0 && y < 20) {\r\n            setMousePosition({ x, y });\r\n          }\r\n        }\r\n      }\r\n    };\r\n    \r\n    const handleStartDragFromLibrary = (e: CustomEvent) => {\r\n      const { piece, clientX, clientY } = e.detail;\r\n      setIsDragging(true);\r\n      setDragMode('dragging');\r\n      \r\n      // 计算棋盘上的初始位置\r\n      const boardElement = document.querySelector('[data-board-grid]');\r\n      if (boardElement) {\r\n        const rect = boardElement.getBoundingClientRect();\r\n        const x = Math.floor((clientX - rect.left) / (rect.width / 20));\r\n        const y = Math.floor((clientY - rect.top) / (rect.height / 20));\r\n        setMousePosition({ x, y });\r\n      }\r\n    };\r\n    \r\n    if (dragMode === 'dragging') {\r\n      document.addEventListener('mousemove', handleGlobalMouseMove);\r\n    }\r\n    \r\n    // 监听从拼图库开始的拖拽\r\n    const boardElement = document.querySelector('[data-board-grid]');\r\n    if (boardElement) {\r\n      boardElement.addEventListener('startDragFromLibrary', handleStartDragFromLibrary as EventListener);\r\n    }\r\n    \r\n    return () => {\r\n      document.removeEventListener('mousemove', handleGlobalMouseMove);\r\n      if (boardElement) {\r\n        boardElement.removeEventListener('startDragFromLibrary', handleStartDragFromLibrary as EventListener);\r\n      }\r\n    };\r\n  }, [dragMode, selectedPiece]);\r\n  \r\n  // 检查拼图是否可以放置在指定位置\r\n  const canPlaceAt = (x: number, y: number): boolean => {\r\n    if (!selectedPiece || currentPlayer.color !== 'red') return false;\r\n    \r\n    const colorIndex = currentPlayerIndex + 1;\r\n    return canPlacePiece(board, selectedPiece, { x, y }, colorIndex);\r\n  };\r\n  \r\n  // 开始拖拽\r\n  const startDrag = (x: number, y: number, e: React.MouseEvent) => {\r\n    if (!selectedPiece || currentPlayer.color !== 'red') return;\r\n    \r\n    setIsDragging(true);\r\n    setDragMode('dragging');\r\n    setMousePosition({ x, y });\r\n  };\r\n  \r\n  // 从拼图库开始拖拽\r\n  const startDragFromLibrary = (e: React.MouseEvent) => {\r\n    if (!selectedPiece || currentPlayer.color !== 'red') return;\r\n    \r\n    setIsDragging(true);\r\n    setDragMode('dragging');\r\n    \r\n    // 计算棋盘上的初始位置\r\n    const rect = e.currentTarget.getBoundingClientRect();\r\n    const x = Math.floor((e.clientX - rect.left) / (rect.width / 20));\r\n    const y = Math.floor((e.clientY - rect.top) / (rect.height / 20));\r\n    setMousePosition({ x, y });\r\n  };\r\n  \r\n  // 拖拽中\r\n  const handleDrag = (e: React.MouseEvent) => {\r\n    if (dragMode !== 'dragging') return;\r\n    \r\n    const rect = e.currentTarget.getBoundingClientRect();\r\n    const x = Math.floor((e.clientX - rect.left) / (rect.width / 20));\r\n    const y = Math.floor((e.clientY - rect.top) / (rect.height / 20));\r\n    \r\n    setMousePosition({ x, y });\r\n  };\r\n  \r\n  // 结束拖拽\r\n  const endDrag = () => {\r\n    if (dragMode !== 'dragging') return;\r\n    \r\n    setIsDragging(false);\r\n    setDragMode('none');\r\n    \r\n    // 检查是否可以放置\r\n    if (canPlaceAt(mousePosition.x, mousePosition.y)) {\r\n      onPiecePlace(mousePosition);\r\n    }\r\n  };\r\n  \r\n  // 处理棋盘点击（放置拼图）\r\n  const handleBoardClick = (x: number, y: number) => {\r\n    if (dragMode === 'dragging' && selectedPiece) {\r\n      // 如果正在拖拽，点击就放置\r\n      if (canPlaceAt(x, y)) {\r\n        onPiecePlace({ x, y });\r\n        setIsDragging(false);\r\n        setDragMode('none');\r\n      }\r\n    } else if (!isDragging) {\r\n      // 如果没有拖拽，正常处理点击\r\n      onCellClick({ x, y });\r\n    }\r\n  };\r\n  \r\n  const handleCellClick = (x: number, y: number) => {\r\n    if (isDragging) return;\r\n    onCellClick({ x, y });\r\n  };\r\n  \r\n  const handleCellHover = (x: number, y: number) => {\r\n    if (isDragging) return;\r\n    onCellHover({ x, y });\r\n  };\r\n  \r\n  // 检查位置是否在拼图范围内\r\n  const isPositionInPiece = (x: number, y: number, pieceX: number, pieceY: number): boolean => {\r\n    if (!selectedPiece) return false;\r\n    \r\n    const { shape } = selectedPiece;\r\n    const relativeX = x - pieceX;\r\n    const relativeY = y - pieceY;\r\n    \r\n    return relativeY >= 0 && relativeY < shape.length && \r\n           relativeX >= 0 && relativeX < shape[0]?.length && \r\n           shape[relativeY][relativeX] === 1;\r\n  };\r\n  \r\n  // 检查位置是否应该高亮（可放置）\r\n  const shouldHighlight = (x: number, y: number): boolean => {\r\n    if (dragMode !== 'dragging' || !selectedPiece) return false;\r\n    \r\n    return isPositionInPiece(x, y, mousePosition.x, mousePosition.y) && \r\n           canPlaceAt(mousePosition.x, mousePosition.y);\r\n  };\r\n  \r\n  // 检查位置是否应该显示无效提示（不可放置）\r\n  const shouldShowInvalid = (x: number, y: number): boolean => {\r\n    if (dragMode !== 'dragging' || !selectedPiece) return false;\r\n    \r\n    return isPositionInPiece(x, y, mousePosition.x, mousePosition.y) && \r\n           !canPlaceAt(mousePosition.x, mousePosition.y);\r\n  };\r\n  \r\n  return (\r\n    <BoardContainer>\r\n      <BoardTitle>\r\n        {currentPlayer.name}的回合\r\n        {currentPlayer.color === 'red' && ` - 剩余时间: ${gameState.timeLeft}秒`}\r\n      </BoardTitle>\r\n             <BoardGrid\r\n         data-board-grid\r\n         onMouseMove={handleDrag}\r\n       >\r\n        {board.map((row, y) =>\r\n          row.map((cell, x) => (\r\n                         <Cell\r\n               key={`${x}-${y}`}\r\n               isOccupied={cell !== 0}\r\n               playerColor={cell}\r\n               isHighlighted={shouldHighlight(x, y)}\r\n               isInvalid={shouldShowInvalid(x, y)}\r\n               isCurrentTurn={currentPlayer.isCurrentTurn}\r\n               onClick={() => handleBoardClick(x, y)}\r\n               onMouseEnter={() => handleCellHover(x, y)}\r\n               onMouseDown={(e) => startDrag(x, y, e)}\r\n             />\r\n          ))\r\n        )}\r\n      </BoardGrid>\r\n      \r\n             \r\n    </BoardContainer>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AAEtC,SAASC,aAAa,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASpD,MAAMC,cAAc,GAAGJ,MAAM,CAACK,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GATIF,cAAc;AAWpB,MAAMG,UAAU,GAAGP,MAAM,CAACQ,EAAE;AAC5B;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAJIF,UAAU;AAMhB,MAAMG,SAAS,GAAGV,MAAM,CAACK,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACM,GAAA,GAXID,SAAS;AAaf,MAAME,IAAI,GAAGZ,MAAM,CAACK,GAMlB;AACF;AACA;AACA,gBAAgBQ,KAAK,IAAI;EACrB,IAAIA,KAAK,CAACC,UAAU,EAAE;IACpB,MAAMC,MAAM,GAAG,CAAC,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;IAC1E,OAAOA,MAAM,CAACF,KAAK,CAACG,WAAW,CAAC,IAAI,MAAM;EAC5C;EACA,IAAIH,KAAK,CAACI,aAAa,EAAE;IACvB,OAAO,wBAAwB;EACjC;EACA,IAAIJ,KAAK,CAACK,SAAS,EAAE;IACnB,OAAO,sBAAsB;EAC/B;EACA,IAAIL,KAAK,CAACM,aAAa,EAAE;IACvB,OAAO,sBAAsB;EAC/B;EACA,OAAO,MAAM;AACf,CAAC;AACH,YAAYN,KAAK,IAAI;EACjB,IAAIA,KAAK,CAACI,aAAa,EAAE,OAAO,mBAAmB;EACnD,IAAIJ,KAAK,CAACK,SAAS,EAAE,OAAO,mBAAmB;EAC/C,OAAO,gBAAgB;AACzB,CAAC;AACH,YAAYL,KAAK,IAAIA,KAAK,CAACI,aAAa,GAAG,SAAS,GAAG,SAAS;AAChE;AACA;AACA;AACA,iBAAiBJ,KAAK,IAAIA,KAAK,CAACI,aAAa,GAAG,YAAY,GAAG,UAAU;AACzE,kBAAkBJ,KAAK,IAAIA,KAAK,CAACI,aAAa,GAAG,gCAAgC,GAAG,MAAM;AAC1F;AACA,CAAC;AAACG,GAAA,GArCIR,IAAI;AAyCV,MAAMS,SAAmC,GAAGA,CAAC;EAC3CC,SAAS;EACTC,WAAW;EACXC,WAAW;EACXC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM;IAAEC,KAAK;IAAEC,OAAO;IAAEC,kBAAkB;IAAEC;EAAc,CAAC,GAAGR,SAAS;EACvE,MAAMS,aAAa,GAAGH,OAAO,CAACC,kBAAkB,CAAC;;EAEjD;EACA,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACoC,aAAa,EAAEC,gBAAgB,CAAC,GAAGrC,QAAQ,CAAW;IAAEsC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAC5E,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGzC,QAAQ,CAAkC,MAAM,CAAC;;EAEjF;EACAC,SAAS,CAAC,MAAM;IACd,MAAMyC,qBAAqB,GAAIC,CAAa,IAAK;MAC/C,IAAIH,QAAQ,KAAK,UAAU,IAAIR,aAAa,EAAE;QAC5C;QACA,MAAMY,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,mBAAmB,CAAC;QAChE,IAAIF,YAAY,EAAE;UAChB,MAAMG,IAAI,GAAGH,YAAY,CAACI,qBAAqB,CAAC,CAAC;UACjD,MAAMV,CAAC,GAAGW,IAAI,CAACC,KAAK,CAAC,CAACP,CAAC,CAACQ,OAAO,GAAGJ,IAAI,CAACK,IAAI,KAAKL,IAAI,CAACM,KAAK,GAAG,EAAE,CAAC,CAAC;UACjE,MAAMd,CAAC,GAAGU,IAAI,CAACC,KAAK,CAAC,CAACP,CAAC,CAACW,OAAO,GAAGP,IAAI,CAACQ,GAAG,KAAKR,IAAI,CAACS,MAAM,GAAG,EAAE,CAAC,CAAC;UAEjE,IAAIlB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,EAAE,IAAIC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,EAAE,EAAE;YACxCF,gBAAgB,CAAC;cAAEC,CAAC;cAAEC;YAAE,CAAC,CAAC;UAC5B;QACF;MACF;IACF,CAAC;IAED,MAAMkB,0BAA0B,GAAId,CAAc,IAAK;MACrD,MAAM;QAAEe,KAAK;QAAEP,OAAO;QAAEG;MAAQ,CAAC,GAAGX,CAAC,CAACgB,MAAM;MAC5CxB,aAAa,CAAC,IAAI,CAAC;MACnBM,WAAW,CAAC,UAAU,CAAC;;MAEvB;MACA,MAAMG,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,mBAAmB,CAAC;MAChE,IAAIF,YAAY,EAAE;QAChB,MAAMG,IAAI,GAAGH,YAAY,CAACI,qBAAqB,CAAC,CAAC;QACjD,MAAMV,CAAC,GAAGW,IAAI,CAACC,KAAK,CAAC,CAACC,OAAO,GAAGJ,IAAI,CAACK,IAAI,KAAKL,IAAI,CAACM,KAAK,GAAG,EAAE,CAAC,CAAC;QAC/D,MAAMd,CAAC,GAAGU,IAAI,CAACC,KAAK,CAAC,CAACI,OAAO,GAAGP,IAAI,CAACQ,GAAG,KAAKR,IAAI,CAACS,MAAM,GAAG,EAAE,CAAC,CAAC;QAC/DnB,gBAAgB,CAAC;UAAEC,CAAC;UAAEC;QAAE,CAAC,CAAC;MAC5B;IACF,CAAC;IAED,IAAIC,QAAQ,KAAK,UAAU,EAAE;MAC3BK,QAAQ,CAACe,gBAAgB,CAAC,WAAW,EAAElB,qBAAqB,CAAC;IAC/D;;IAEA;IACA,MAAME,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,mBAAmB,CAAC;IAChE,IAAIF,YAAY,EAAE;MAChBA,YAAY,CAACgB,gBAAgB,CAAC,sBAAsB,EAAEH,0BAA2C,CAAC;IACpG;IAEA,OAAO,MAAM;MACXZ,QAAQ,CAACgB,mBAAmB,CAAC,WAAW,EAAEnB,qBAAqB,CAAC;MAChE,IAAIE,YAAY,EAAE;QAChBA,YAAY,CAACiB,mBAAmB,CAAC,sBAAsB,EAAEJ,0BAA2C,CAAC;MACvG;IACF,CAAC;EACH,CAAC,EAAE,CAACjB,QAAQ,EAAER,aAAa,CAAC,CAAC;;EAE7B;EACA,MAAM8B,UAAU,GAAGA,CAACxB,CAAS,EAAEC,CAAS,KAAc;IACpD,IAAI,CAACP,aAAa,IAAIC,aAAa,CAAC8B,KAAK,KAAK,KAAK,EAAE,OAAO,KAAK;IAEjE,MAAMC,UAAU,GAAGjC,kBAAkB,GAAG,CAAC;IACzC,OAAO5B,aAAa,CAAC0B,KAAK,EAAEG,aAAa,EAAE;MAAEM,CAAC;MAAEC;IAAE,CAAC,EAAEyB,UAAU,CAAC;EAClE,CAAC;;EAED;EACA,MAAMC,SAAS,GAAGA,CAAC3B,CAAS,EAAEC,CAAS,EAAEI,CAAmB,KAAK;IAC/D,IAAI,CAACX,aAAa,IAAIC,aAAa,CAAC8B,KAAK,KAAK,KAAK,EAAE;IAErD5B,aAAa,CAAC,IAAI,CAAC;IACnBM,WAAW,CAAC,UAAU,CAAC;IACvBJ,gBAAgB,CAAC;MAAEC,CAAC;MAAEC;IAAE,CAAC,CAAC;EAC5B,CAAC;;EAED;EACA,MAAM2B,oBAAoB,GAAIvB,CAAmB,IAAK;IACpD,IAAI,CAACX,aAAa,IAAIC,aAAa,CAAC8B,KAAK,KAAK,KAAK,EAAE;IAErD5B,aAAa,CAAC,IAAI,CAAC;IACnBM,WAAW,CAAC,UAAU,CAAC;;IAEvB;IACA,MAAMM,IAAI,GAAGJ,CAAC,CAACwB,aAAa,CAACnB,qBAAqB,CAAC,CAAC;IACpD,MAAMV,CAAC,GAAGW,IAAI,CAACC,KAAK,CAAC,CAACP,CAAC,CAACQ,OAAO,GAAGJ,IAAI,CAACK,IAAI,KAAKL,IAAI,CAACM,KAAK,GAAG,EAAE,CAAC,CAAC;IACjE,MAAMd,CAAC,GAAGU,IAAI,CAACC,KAAK,CAAC,CAACP,CAAC,CAACW,OAAO,GAAGP,IAAI,CAACQ,GAAG,KAAKR,IAAI,CAACS,MAAM,GAAG,EAAE,CAAC,CAAC;IACjEnB,gBAAgB,CAAC;MAAEC,CAAC;MAAEC;IAAE,CAAC,CAAC;EAC5B,CAAC;;EAED;EACA,MAAM6B,UAAU,GAAIzB,CAAmB,IAAK;IAC1C,IAAIH,QAAQ,KAAK,UAAU,EAAE;IAE7B,MAAMO,IAAI,GAAGJ,CAAC,CAACwB,aAAa,CAACnB,qBAAqB,CAAC,CAAC;IACpD,MAAMV,CAAC,GAAGW,IAAI,CAACC,KAAK,CAAC,CAACP,CAAC,CAACQ,OAAO,GAAGJ,IAAI,CAACK,IAAI,KAAKL,IAAI,CAACM,KAAK,GAAG,EAAE,CAAC,CAAC;IACjE,MAAMd,CAAC,GAAGU,IAAI,CAACC,KAAK,CAAC,CAACP,CAAC,CAACW,OAAO,GAAGP,IAAI,CAACQ,GAAG,KAAKR,IAAI,CAACS,MAAM,GAAG,EAAE,CAAC,CAAC;IAEjEnB,gBAAgB,CAAC;MAAEC,CAAC;MAAEC;IAAE,CAAC,CAAC;EAC5B,CAAC;;EAED;EACA,MAAM8B,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAI7B,QAAQ,KAAK,UAAU,EAAE;IAE7BL,aAAa,CAAC,KAAK,CAAC;IACpBM,WAAW,CAAC,MAAM,CAAC;;IAEnB;IACA,IAAIqB,UAAU,CAAC1B,aAAa,CAACE,CAAC,EAAEF,aAAa,CAACG,CAAC,CAAC,EAAE;MAChDZ,YAAY,CAACS,aAAa,CAAC;IAC7B;EACF,CAAC;;EAED;EACA,MAAMkC,gBAAgB,GAAGA,CAAChC,CAAS,EAAEC,CAAS,KAAK;IACjD,IAAIC,QAAQ,KAAK,UAAU,IAAIR,aAAa,EAAE;MAC5C;MACA,IAAI8B,UAAU,CAACxB,CAAC,EAAEC,CAAC,CAAC,EAAE;QACpBZ,YAAY,CAAC;UAAEW,CAAC;UAAEC;QAAE,CAAC,CAAC;QACtBJ,aAAa,CAAC,KAAK,CAAC;QACpBM,WAAW,CAAC,MAAM,CAAC;MACrB;IACF,CAAC,MAAM,IAAI,CAACP,UAAU,EAAE;MACtB;MACAT,WAAW,CAAC;QAAEa,CAAC;QAAEC;MAAE,CAAC,CAAC;IACvB;EACF,CAAC;EAED,MAAMgC,eAAe,GAAGA,CAACjC,CAAS,EAAEC,CAAS,KAAK;IAChD,IAAIL,UAAU,EAAE;IAChBT,WAAW,CAAC;MAAEa,CAAC;MAAEC;IAAE,CAAC,CAAC;EACvB,CAAC;EAED,MAAMiC,eAAe,GAAGA,CAAClC,CAAS,EAAEC,CAAS,KAAK;IAChD,IAAIL,UAAU,EAAE;IAChBR,WAAW,CAAC;MAAEY,CAAC;MAAEC;IAAE,CAAC,CAAC;EACvB,CAAC;;EAED;EACA,MAAMkC,iBAAiB,GAAGA,CAACnC,CAAS,EAAEC,CAAS,EAAEmC,MAAc,EAAEC,MAAc,KAAc;IAAA,IAAAC,OAAA;IAC3F,IAAI,CAAC5C,aAAa,EAAE,OAAO,KAAK;IAEhC,MAAM;MAAE6C;IAAM,CAAC,GAAG7C,aAAa;IAC/B,MAAM8C,SAAS,GAAGxC,CAAC,GAAGoC,MAAM;IAC5B,MAAMK,SAAS,GAAGxC,CAAC,GAAGoC,MAAM;IAE5B,OAAOI,SAAS,IAAI,CAAC,IAAIA,SAAS,GAAGF,KAAK,CAACG,MAAM,IAC1CF,SAAS,IAAI,CAAC,IAAIA,SAAS,KAAAF,OAAA,GAAGC,KAAK,CAAC,CAAC,CAAC,cAAAD,OAAA,uBAARA,OAAA,CAAUI,MAAM,KAC9CH,KAAK,CAACE,SAAS,CAAC,CAACD,SAAS,CAAC,KAAK,CAAC;EAC1C,CAAC;;EAED;EACA,MAAMG,eAAe,GAAGA,CAAC3C,CAAS,EAAEC,CAAS,KAAc;IACzD,IAAIC,QAAQ,KAAK,UAAU,IAAI,CAACR,aAAa,EAAE,OAAO,KAAK;IAE3D,OAAOyC,iBAAiB,CAACnC,CAAC,EAAEC,CAAC,EAAEH,aAAa,CAACE,CAAC,EAAEF,aAAa,CAACG,CAAC,CAAC,IACzDuB,UAAU,CAAC1B,aAAa,CAACE,CAAC,EAAEF,aAAa,CAACG,CAAC,CAAC;EACrD,CAAC;;EAED;EACA,MAAM2C,iBAAiB,GAAGA,CAAC5C,CAAS,EAAEC,CAAS,KAAc;IAC3D,IAAIC,QAAQ,KAAK,UAAU,IAAI,CAACR,aAAa,EAAE,OAAO,KAAK;IAE3D,OAAOyC,iBAAiB,CAACnC,CAAC,EAAEC,CAAC,EAAEH,aAAa,CAACE,CAAC,EAAEF,aAAa,CAACG,CAAC,CAAC,IACzD,CAACuB,UAAU,CAAC1B,aAAa,CAACE,CAAC,EAAEF,aAAa,CAACG,CAAC,CAAC;EACtD,CAAC;EAED,oBACElC,OAAA,CAACC,cAAc;IAAA6E,QAAA,gBACb9E,OAAA,CAACI,UAAU;MAAA0E,QAAA,GACRlD,aAAa,CAACmD,IAAI,EAAC,oBACpB,EAACnD,aAAa,CAAC8B,KAAK,KAAK,KAAK,IAAI,YAAYvC,SAAS,CAAC6D,QAAQ,GAAG;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD,CAAC,eACNpF,OAAA,CAACO,SAAS;MACd,uBAAe;MACf8E,WAAW,EAAEtB,UAAW;MAAAe,QAAA,EAExBtD,KAAK,CAAC8D,GAAG,CAAC,CAACC,GAAG,EAAErD,CAAC,KAChBqD,GAAG,CAACD,GAAG,CAAC,CAACE,IAAI,EAAEvD,CAAC,kBACDjC,OAAA,CAACS,IAAI;QAEfE,UAAU,EAAE6E,IAAI,KAAK,CAAE;QACvB3E,WAAW,EAAE2E,IAAK;QAClB1E,aAAa,EAAE8D,eAAe,CAAC3C,CAAC,EAAEC,CAAC,CAAE;QACrCnB,SAAS,EAAE8D,iBAAiB,CAAC5C,CAAC,EAAEC,CAAC,CAAE;QACnClB,aAAa,EAAEY,aAAa,CAACZ,aAAc;QAC3CyE,OAAO,EAAEA,CAAA,KAAMxB,gBAAgB,CAAChC,CAAC,EAAEC,CAAC,CAAE;QACtCwD,YAAY,EAAEA,CAAA,KAAMvB,eAAe,CAAClC,CAAC,EAAEC,CAAC,CAAE;QAC1CyD,WAAW,EAAGrD,CAAC,IAAKsB,SAAS,CAAC3B,CAAC,EAAEC,CAAC,EAAEI,CAAC;MAAE,GARlC,GAAGL,CAAC,IAAIC,CAAC,EAAE;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASjB,CACH,CACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGE,CAAC;AAErB,CAAC;AAAC7D,EAAA,CA5MIL,SAAmC;AAAA0E,GAAA,GAAnC1E,SAAmC;AA8MzC,eAAeA,SAAS;AAAC,IAAAf,EAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAS,GAAA,EAAA2E,GAAA;AAAAC,YAAA,CAAA1F,EAAA;AAAA0F,YAAA,CAAAvF,GAAA;AAAAuF,YAAA,CAAArF,GAAA;AAAAqF,YAAA,CAAA5E,GAAA;AAAA4E,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}