{"ast":null,"code":"import _taggedTemplateLiteral from\"D:/blockus new/blockus-game/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4;// 游戏棋盘组件\nimport React from'react';import styled from'styled-components';import{canPlacePiece}from'../utils/gameEngine';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const BoardContainer=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  background: #f5f5f5;\\n  border-radius: 8px;\\n  padding: 20px;\\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\\n\"])));const BoardTitle=styled.h2(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  margin: 0 0 20px 0;\\n  color: #333;\\n  font-size: 24px;\\n\"])));const BoardGrid=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: repeat(20, 1fr);\\n  grid-template-rows: repeat(20, 1fr);\\n  gap: 1px;\\n  background: #ccc;\\n  border: 2px solid #333;\\n  width: 600px;\\n  height: 600px;\\n  max-width: 90vw;\\n  max-height: 90vw;\\n\"])));const Cell=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100%;\\n  background: \",\";\\n  border: \",\";\\n  cursor: \",\";\\n  transition: all 0.2s ease;\\n  \\n  &:hover {\\n    transform: \",\";\\n    box-shadow: \",\";\\n  }\\n\"])),props=>{if(props.isOccupied){const colors=['transparent','#FF4444','#FFDD44','#4444FF','#44FF44'];return colors[props.playerColor]||'#ccc';}if(props.isHighlighted){return'rgba(255, 255, 0, 0.3)';}if(props.isCurrentTurn){return'rgba(0, 255, 0, 0.1)';}return'#fff';},props=>props.isHighlighted?'2px solid #FFD700':'1px solid #ddd',props=>props.isHighlighted?'pointer':'default',props=>props.isHighlighted?'scale(1.1)':'scale(1)',props=>props.isHighlighted?'0 0 8px rgba(255, 215, 0, 0.6)':'none');const GameBoard=_ref=>{let{gameState,onCellClick,onCellHover}=_ref;const{board,players,currentPlayerIndex,selectedPiece}=gameState;const currentPlayer=players[currentPlayerIndex];// 检查拼图是否可以放置在指定位置\nconst canPlaceAt=(x,y)=>{if(!selectedPiece||currentPlayer.color!=='red')return false;const colorIndex=currentPlayerIndex+1;return canPlacePiece(board,selectedPiece,{x,y},colorIndex);};// 获取拼图在指定位置时会占据的所有格子\nconst getPieceCells=(x,y)=>{if(!selectedPiece||currentPlayer.color!=='red')return[];const cells=[];const{shape}=selectedPiece;for(let row=0;row<shape.length;row++){for(let col=0;col<shape[row].length;col++){if(shape[row][col]===1){cells.push({x:x+col,y:y+row});}}}return cells;};// 检查格子是否应该高亮显示（拼图悬停位置）\nconst shouldHighlight=(x,y)=>{var _shape$;if(!selectedPiece||currentPlayer.color!=='red')return false;// 检查所有可能的位置，看是否有拼图悬停\n// 为了性能，我们只检查拼图周围的一些位置\nconst{shape}=selectedPiece;const maxOffset=Math.max(shape.length,((_shape$=shape[0])===null||_shape$===void 0?void 0:_shape$.length)||1);for(let offsetY=-maxOffset;offsetY<=maxOffset;offsetY++){for(let offsetX=-maxOffset;offsetX<=maxOffset;offsetX++){const checkX=x-offsetX;const checkY=y-offsetY;if(checkX>=0&&checkX<board.length&&checkY>=0&&checkY<board[0].length){if(canPlacePiece(board,selectedPiece,{x:checkX,y:checkY},currentPlayerIndex+1)){const pieceCells=getPieceCells(checkX,checkY);if(pieceCells.some(cell=>cell.x===x&&cell.y===y)){return true;}}}}}return false;};const handleCellClick=(x,y)=>{onCellClick({x,y});};const handleCellHover=(x,y)=>{onCellHover({x,y});};return/*#__PURE__*/_jsxs(BoardContainer,{children:[/*#__PURE__*/_jsxs(BoardTitle,{children:[currentPlayer.name,\"\\u7684\\u56DE\\u5408\",currentPlayer.color==='red'&&\" - \\u5269\\u4F59\\u65F6\\u95F4: \".concat(gameState.timeLeft,\"\\u79D2\")]}),/*#__PURE__*/_jsx(BoardGrid,{children:board.map((row,y)=>row.map((cell,x)=>/*#__PURE__*/_jsx(Cell,{isOccupied:cell!==0,playerColor:cell,isHighlighted:shouldHighlight(x,y),isCurrentTurn:currentPlayer.isCurrentTurn,onClick:()=>handleCellClick(x,y),onMouseEnter:()=>handleCellHover(x,y)},\"\".concat(x,\"-\").concat(y))))})]});};export default GameBoard;","map":{"version":3,"names":["React","styled","canPlacePiece","jsxs","_jsxs","jsx","_jsx","BoardContainer","div","_templateObject","_taggedTemplateLiteral","BoardTitle","h2","_templateObject2","BoardGrid","_templateObject3","Cell","_templateObject4","props","isOccupied","colors","playerColor","isHighlighted","isCurrentTurn","GameBoard","_ref","gameState","onCellClick","onCellHover","board","players","currentPlayerIndex","selectedPiece","currentPlayer","canPlaceAt","x","y","color","colorIndex","getPieceCells","cells","shape","row","length","col","push","shouldHighlight","_shape$","maxOffset","Math","max","offsetY","offsetX","checkX","checkY","pieceCells","some","cell","handleCellClick","handleCellHover","children","name","concat","timeLeft","map","onClick","onMouseEnter"],"sources":["D:/blockus new/blockus-game/src/components/GameBoard.tsx"],"sourcesContent":["// 游戏棋盘组件\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { GameState, Position } from '../types/game';\r\nimport { PLAYER_COLORS } from '../constants/pieces';\r\nimport { canPlacePiece } from '../utils/gameEngine';\r\n\r\ninterface GameBoardProps {\r\n  gameState: GameState;\r\n  onCellClick: (position: Position) => void;\r\n  onCellHover: (position: Position) => void;\r\n}\r\n\r\nconst BoardContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: #f5f5f5;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst BoardTitle = styled.h2`\r\n  margin: 0 0 20px 0;\r\n  color: #333;\r\n  font-size: 24px;\r\n`;\r\n\r\nconst BoardGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(20, 1fr);\r\n  grid-template-rows: repeat(20, 1fr);\r\n  gap: 1px;\r\n  background: #ccc;\r\n  border: 2px solid #333;\r\n  width: 600px;\r\n  height: 600px;\r\n  max-width: 90vw;\r\n  max-height: 90vw;\r\n`;\r\n\r\nconst Cell = styled.div<{ \r\n  isOccupied: boolean; \r\n  playerColor: number;\r\n  isHighlighted: boolean;\r\n  isCurrentTurn: boolean;\r\n}>`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: ${props => {\r\n    if (props.isOccupied) {\r\n      const colors = ['transparent', '#FF4444', '#FFDD44', '#4444FF', '#44FF44'];\r\n      return colors[props.playerColor] || '#ccc';\r\n    }\r\n    if (props.isHighlighted) {\r\n      return 'rgba(255, 255, 0, 0.3)';\r\n    }\r\n    if (props.isCurrentTurn) {\r\n      return 'rgba(0, 255, 0, 0.1)';\r\n    }\r\n    return '#fff';\r\n  }};\r\n  border: ${props => props.isHighlighted ? '2px solid #FFD700' : '1px solid #ddd'};\r\n  cursor: ${props => props.isHighlighted ? 'pointer' : 'default'};\r\n  transition: all 0.2s ease;\r\n  \r\n  &:hover {\r\n    transform: ${props => props.isHighlighted ? 'scale(1.1)' : 'scale(1)'};\r\n    box-shadow: ${props => props.isHighlighted ? '0 0 8px rgba(255, 215, 0, 0.6)' : 'none'};\r\n  }\r\n`;\r\n\r\nconst GameBoard: React.FC<GameBoardProps> = ({ \r\n  gameState, \r\n  onCellClick, \r\n  onCellHover \r\n}) => {\r\n  const { board, players, currentPlayerIndex, selectedPiece } = gameState;\r\n  const currentPlayer = players[currentPlayerIndex];\r\n  \r\n  // 检查拼图是否可以放置在指定位置\r\n  const canPlaceAt = (x: number, y: number): boolean => {\r\n    if (!selectedPiece || currentPlayer.color !== 'red') return false;\r\n    \r\n    const colorIndex = currentPlayerIndex + 1;\r\n    return canPlacePiece(board, selectedPiece, { x, y }, colorIndex);\r\n  };\r\n  \r\n  // 获取拼图在指定位置时会占据的所有格子\r\n  const getPieceCells = (x: number, y: number): Position[] => {\r\n    if (!selectedPiece || currentPlayer.color !== 'red') return [];\r\n    \r\n    const cells: Position[] = [];\r\n    const { shape } = selectedPiece;\r\n    \r\n    for (let row = 0; row < shape.length; row++) {\r\n      for (let col = 0; col < shape[row].length; col++) {\r\n        if (shape[row][col] === 1) {\r\n          cells.push({ x: x + col, y: y + row });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return cells;\r\n  };\r\n  \r\n  // 检查格子是否应该高亮显示（拼图悬停位置）\r\n  const shouldHighlight = (x: number, y: number): boolean => {\r\n    if (!selectedPiece || currentPlayer.color !== 'red') return false;\r\n    \r\n    // 检查所有可能的位置，看是否有拼图悬停\r\n    // 为了性能，我们只检查拼图周围的一些位置\r\n    const { shape } = selectedPiece;\r\n    const maxOffset = Math.max(shape.length, shape[0]?.length || 1);\r\n    \r\n    for (let offsetY = -maxOffset; offsetY <= maxOffset; offsetY++) {\r\n      for (let offsetX = -maxOffset; offsetX <= maxOffset; offsetX++) {\r\n        const checkX = x - offsetX;\r\n        const checkY = y - offsetY;\r\n        \r\n        if (checkX >= 0 && checkX < board.length && checkY >= 0 && checkY < board[0].length) {\r\n          if (canPlacePiece(board, selectedPiece, { x: checkX, y: checkY }, currentPlayerIndex + 1)) {\r\n            const pieceCells = getPieceCells(checkX, checkY);\r\n            if (pieceCells.some(cell => cell.x === x && cell.y === y)) {\r\n              return true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  };\r\n  \r\n  const handleCellClick = (x: number, y: number) => {\r\n    onCellClick({ x, y });\r\n  };\r\n  \r\n  const handleCellHover = (x: number, y: number) => {\r\n    onCellHover({ x, y });\r\n  };\r\n  \r\n  return (\r\n    <BoardContainer>\r\n      <BoardTitle>\r\n        {currentPlayer.name}的回合\r\n        {currentPlayer.color === 'red' && ` - 剩余时间: ${gameState.timeLeft}秒`}\r\n      </BoardTitle>\r\n      <BoardGrid>\r\n        {board.map((row, y) =>\r\n          row.map((cell, x) => (\r\n            <Cell\r\n              key={`${x}-${y}`}\r\n              isOccupied={cell !== 0}\r\n              playerColor={cell}\r\n              isHighlighted={shouldHighlight(x, y)}\r\n              isCurrentTurn={currentPlayer.isCurrentTurn}\r\n              onClick={() => handleCellClick(x, y)}\r\n              onMouseEnter={() => handleCellHover(x, y)}\r\n            />\r\n          ))\r\n        )}\r\n      </BoardGrid>\r\n    </BoardContainer>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}