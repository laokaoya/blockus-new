{"ast":null,"code":"var _jsxFileName = \"D:\\\\blockus new\\\\blockus-game\\\\src\\\\components\\\\GameBoard.tsx\";\n// 游戏棋盘组件\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { canPlacePiece } from '../utils/gameEngine';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: #f5f5f5;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n`;\n_c = BoardContainer;\nconst BoardTitle = styled.h2`\n  margin: 0 0 20px 0;\n  color: #333;\n  font-size: 24px;\n`;\n_c2 = BoardTitle;\nconst BoardGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(20, 1fr);\n  grid-template-rows: repeat(20, 1fr);\n  gap: 1px;\n  background: #ccc;\n  border: 2px solid #333;\n  width: 600px;\n  height: 600px;\n  max-width: 90vw;\n  max-height: 90vw;\n`;\n_c3 = BoardGrid;\nconst Cell = styled.div`\n  width: 100%;\n  height: 100%;\n  background: ${props => {\n  if (props.isOccupied) {\n    const colors = ['transparent', '#FF4444', '#FFDD44', '#4444FF', '#44FF44'];\n    return colors[props.playerColor] || '#ccc';\n  }\n  if (props.isHighlighted) {\n    return 'rgba(255, 255, 0, 0.3)';\n  }\n  if (props.isCurrentTurn) {\n    return 'rgba(0, 255, 0, 0.1)';\n  }\n  return '#fff';\n}};\n  border: ${props => props.isHighlighted ? '2px solid #FFD700' : '1px solid #ddd'};\n  cursor: ${props => props.isHighlighted ? 'pointer' : 'default'};\n  transition: all 0.2s ease;\n  \n  &:hover {\n    transform: ${props => props.isHighlighted ? 'scale(1.1)' : 'scale(1)'};\n    box-shadow: ${props => props.isHighlighted ? '0 0 8px rgba(255, 215, 0, 0.6)' : 'none'};\n  }\n`;\n_c4 = Cell;\nconst GameBoard = ({\n  gameState,\n  onCellClick,\n  onCellHover\n}) => {\n  const {\n    board,\n    players,\n    currentPlayerIndex,\n    selectedPiece\n  } = gameState;\n  const currentPlayer = players[currentPlayerIndex];\n\n  // 检查拼图是否可以放置在指定位置\n  const canPlaceAt = (x, y) => {\n    if (!selectedPiece || currentPlayer.color !== 'red') return false;\n    const colorIndex = currentPlayerIndex + 1;\n    return canPlacePiece(board, selectedPiece, {\n      x,\n      y\n    }, colorIndex);\n  };\n\n  // 获取拼图在指定位置时会占据的所有格子\n  const getPieceCells = (x, y) => {\n    if (!selectedPiece || currentPlayer.color !== 'red') return [];\n    const cells = [];\n    const {\n      shape\n    } = selectedPiece;\n    for (let row = 0; row < shape.length; row++) {\n      for (let col = 0; col < shape[row].length; col++) {\n        if (shape[row][col] === 1) {\n          cells.push({\n            x: x + col,\n            y: y + row\n          });\n        }\n      }\n    }\n    return cells;\n  };\n\n  // 检查格子是否应该高亮显示（拼图悬停位置）\n  const shouldHighlight = (x, y) => {\n    if (!selectedPiece || currentPlayer.color !== 'red') return false;\n\n    // 检查所有可能的位置，看是否有拼图悬停\n    for (let checkY = 0; checkY < board.length; checkY++) {\n      for (let checkX = 0; checkX < board[checkY].length; checkX++) {\n        if (canPlacePiece(board, selectedPiece, {\n          x: checkX,\n          y: checkY\n        }, currentPlayerIndex + 1)) {\n          const pieceCells = getPieceCells(checkX, checkY);\n          if (pieceCells.some(cell => cell.x === x && cell.y === y)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  const handleCellClick = (x, y) => {\n    onCellClick({\n      x,\n      y\n    });\n  };\n  const handleCellHover = (x, y) => {\n    onCellHover({\n      x,\n      y\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(BoardContainer, {\n    children: [/*#__PURE__*/_jsxDEV(BoardTitle, {\n      children: [currentPlayer.name, \"\\u7684\\u56DE\\u5408\", currentPlayer.color === 'red' && ` - 剩余时间: ${gameState.timeLeft}秒`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BoardGrid, {\n      children: board.map((row, y) => row.map((cell, x) => /*#__PURE__*/_jsxDEV(Cell, {\n        isOccupied: cell !== 0,\n        playerColor: cell,\n        isHighlighted: shouldHighlight(x, y),\n        isCurrentTurn: currentPlayer.isCurrentTurn,\n        onClick: () => handleCellClick(x, y),\n        onMouseEnter: () => handleCellHover(x, y)\n      }, `${x}-${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_c5 = GameBoard;\nexport default GameBoard;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"BoardContainer\");\n$RefreshReg$(_c2, \"BoardTitle\");\n$RefreshReg$(_c3, \"BoardGrid\");\n$RefreshReg$(_c4, \"Cell\");\n$RefreshReg$(_c5, \"GameBoard\");","map":{"version":3,"names":["React","styled","canPlacePiece","jsxDEV","_jsxDEV","BoardContainer","div","_c","BoardTitle","h2","_c2","BoardGrid","_c3","Cell","props","isOccupied","colors","playerColor","isHighlighted","isCurrentTurn","_c4","GameBoard","gameState","onCellClick","onCellHover","board","players","currentPlayerIndex","selectedPiece","currentPlayer","canPlaceAt","x","y","color","colorIndex","getPieceCells","cells","shape","row","length","col","push","shouldHighlight","checkY","checkX","pieceCells","some","cell","handleCellClick","handleCellHover","children","name","timeLeft","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","onMouseEnter","_c5","$RefreshReg$"],"sources":["D:/blockus new/blockus-game/src/components/GameBoard.tsx"],"sourcesContent":["// 游戏棋盘组件\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { GameState, Position } from '../types/game';\r\nimport { PLAYER_COLORS } from '../constants/pieces';\r\nimport { canPlacePiece } from '../utils/gameEngine';\r\n\r\ninterface GameBoardProps {\r\n  gameState: GameState;\r\n  onCellClick: (position: Position) => void;\r\n  onCellHover: (position: Position) => void;\r\n}\r\n\r\nconst BoardContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: #f5f5f5;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst BoardTitle = styled.h2`\r\n  margin: 0 0 20px 0;\r\n  color: #333;\r\n  font-size: 24px;\r\n`;\r\n\r\nconst BoardGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(20, 1fr);\r\n  grid-template-rows: repeat(20, 1fr);\r\n  gap: 1px;\r\n  background: #ccc;\r\n  border: 2px solid #333;\r\n  width: 600px;\r\n  height: 600px;\r\n  max-width: 90vw;\r\n  max-height: 90vw;\r\n`;\r\n\r\nconst Cell = styled.div<{ \r\n  isOccupied: boolean; \r\n  playerColor: number;\r\n  isHighlighted: boolean;\r\n  isCurrentTurn: boolean;\r\n}>`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: ${props => {\r\n    if (props.isOccupied) {\r\n      const colors = ['transparent', '#FF4444', '#FFDD44', '#4444FF', '#44FF44'];\r\n      return colors[props.playerColor] || '#ccc';\r\n    }\r\n    if (props.isHighlighted) {\r\n      return 'rgba(255, 255, 0, 0.3)';\r\n    }\r\n    if (props.isCurrentTurn) {\r\n      return 'rgba(0, 255, 0, 0.1)';\r\n    }\r\n    return '#fff';\r\n  }};\r\n  border: ${props => props.isHighlighted ? '2px solid #FFD700' : '1px solid #ddd'};\r\n  cursor: ${props => props.isHighlighted ? 'pointer' : 'default'};\r\n  transition: all 0.2s ease;\r\n  \r\n  &:hover {\r\n    transform: ${props => props.isHighlighted ? 'scale(1.1)' : 'scale(1)'};\r\n    box-shadow: ${props => props.isHighlighted ? '0 0 8px rgba(255, 215, 0, 0.6)' : 'none'};\r\n  }\r\n`;\r\n\r\nconst GameBoard: React.FC<GameBoardProps> = ({ \r\n  gameState, \r\n  onCellClick, \r\n  onCellHover \r\n}) => {\r\n  const { board, players, currentPlayerIndex, selectedPiece } = gameState;\r\n  const currentPlayer = players[currentPlayerIndex];\r\n  \r\n  // 检查拼图是否可以放置在指定位置\r\n  const canPlaceAt = (x: number, y: number): boolean => {\r\n    if (!selectedPiece || currentPlayer.color !== 'red') return false;\r\n    \r\n    const colorIndex = currentPlayerIndex + 1;\r\n    return canPlacePiece(board, selectedPiece, { x, y }, colorIndex);\r\n  };\r\n  \r\n  // 获取拼图在指定位置时会占据的所有格子\r\n  const getPieceCells = (x: number, y: number): Position[] => {\r\n    if (!selectedPiece || currentPlayer.color !== 'red') return [];\r\n    \r\n    const cells: Position[] = [];\r\n    const { shape } = selectedPiece;\r\n    \r\n    for (let row = 0; row < shape.length; row++) {\r\n      for (let col = 0; col < shape[row].length; col++) {\r\n        if (shape[row][col] === 1) {\r\n          cells.push({ x: x + col, y: y + row });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return cells;\r\n  };\r\n  \r\n  // 检查格子是否应该高亮显示（拼图悬停位置）\r\n  const shouldHighlight = (x: number, y: number): boolean => {\r\n    if (!selectedPiece || currentPlayer.color !== 'red') return false;\r\n    \r\n    // 检查所有可能的位置，看是否有拼图悬停\r\n    for (let checkY = 0; checkY < board.length; checkY++) {\r\n      for (let checkX = 0; checkX < board[checkY].length; checkX++) {\r\n        if (canPlacePiece(board, selectedPiece, { x: checkX, y: checkY }, currentPlayerIndex + 1)) {\r\n          const pieceCells = getPieceCells(checkX, checkY);\r\n          if (pieceCells.some(cell => cell.x === x && cell.y === y)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  };\r\n  \r\n  const handleCellClick = (x: number, y: number) => {\r\n    onCellClick({ x, y });\r\n  };\r\n  \r\n  const handleCellHover = (x: number, y: number) => {\r\n    onCellHover({ x, y });\r\n  };\r\n  \r\n  return (\r\n    <BoardContainer>\r\n      <BoardTitle>\r\n        {currentPlayer.name}的回合\r\n        {currentPlayer.color === 'red' && ` - 剩余时间: ${gameState.timeLeft}秒`}\r\n      </BoardTitle>\r\n      <BoardGrid>\r\n        {board.map((row, y) =>\r\n          row.map((cell, x) => (\r\n            <Cell\r\n              key={`${x}-${y}`}\r\n              isOccupied={cell !== 0}\r\n              playerColor={cell}\r\n              isHighlighted={shouldHighlight(x, y)}\r\n              isCurrentTurn={currentPlayer.isCurrentTurn}\r\n              onClick={() => handleCellClick(x, y)}\r\n              onMouseEnter={() => handleCellHover(x, y)}\r\n            />\r\n          ))\r\n        )}\r\n      </BoardGrid>\r\n    </BoardContainer>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}